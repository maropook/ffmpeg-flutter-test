
  void burnSubtitles() {
    VideoUtil.assetPath(VideoUtil.ASSET_1).then((image1Path) {
      VideoUtil.assetPath(VideoUtil.ASSET_2).then((image2Path) {
        VideoUtil.assetPath(VideoUtil.ASSET_3).then((image3Path) {
          VideoUtil.assetPath(VideoUtil.SUBTITLE_ASSET).then((subtitlePath) {
            getVideoFile().then((videoFile) {
              getVideoWithSubtitlesFile().then((videoWithSubtitlesFile) {
                // IF VIDEO IS PLAYING STOP PLAYBACK
                pause();

                try {
                  videoFile.delete().catchError((_) {});
                } on Exception catch (_) {}

                try {
                  videoWithSubtitlesFile.delete().catchError((_) {});
                } on Exception catch (_) {}

                ffprint("Testing SUBTITLE burning");

                showCreateProgressDialog();

                final ffmpegCommand = VideoUtil.generateEncodeVideoScript(
                    image1Path,
                    image2Path,
                    image3Path,
                    videoFile.path,
                    "mpeg4",
                    "");

                _state = _State.CREATING;

                executeAsyncFFmpeg(ffmpegCommand,
                    (CompletedFFmpegExecution execution) {
                  ffprint(
                      "FFmpeg process exited with rc ${execution.returnCode}.");

                  hideProgressDialog();

                  if (execution.returnCode == 0) {
                    ffprint(
                        "Create completed successfully; burning subtitles.");

                    String burnSubtitlesCommand =
                        // "-y -i ${"/Users/hasegawaitsuki/ghq/github.com/maropook/ffmpeg_flutter_test/assets/a.mp4"} -vf subtitles=$subtitlePath:force_style='Fontname=Trueno' -c:v mpeg4 ${videoWithSubtitlesFile.path}";
                        // どのvideoと合成するか．
                        "-y -i ${videoFile.path} -vf subtitles=$subtitlePath:force_style='Fontname=Trueno' -c:v mpeg4 ${videoWithSubtitlesFile.path}";

                    showBurnProgressDialog();

                    ffprint(
                        "FFmpeg process started with arguments\n\'$burnSubtitlesCommand\'.");

                    _state = _State.BURNING;

                    executeAsyncFFmpeg(burnSubtitlesCommand,
                        (CompletedFFmpegExecution secondExecution) {
                      ffprint(
                          "FFmpeg process exited with rc ${secondExecution.returnCode}.");
                      hideProgressDialog();

                      if (secondExecution.returnCode == 0) {
                        ffprint(
                            "Burn subtitles completed successfully; playing video.");
                        playVideo();
                      } else if (secondExecution.returnCode == 255) {
                        showPopup("Burn subtitles operation cancelled.");
                        ffprint("Burn subtitles operation cancelled");
                      } else {
                        showPopup(
                            "Burn subtitles failed. Please check log for the details.");
                        ffprint(
                            "Burn subtitles failed with rc=${secondExecution.returnCode}.");
                      }
                    }).then((executionId) {
                      _executionId = executionId;
                      ffprint(
                          "Async FFmpeg process started with arguments '$burnSubtitlesCommand' and executionId $executionId.");
                    });
                  }
                }).then((executionId) {
                  _executionId = executionId;
                  ffprint(
                      "Async FFmpeg process started with arguments '$ffmpegCommand' and executionId $executionId.");
                });
              });
            });
          });
        });
      });
    });
  }

  Future<void> playVideo() async {
    if (_videoPlayerController != null) {
      await _videoPlayerController!.initialize();
      await _videoPlayerController!.play();
    }
    _refreshablePlayerDialogFactory.refresh();
  }

  Future<void> pause() async {
    if (_videoPlayerController != null) {
      await _videoPlayerController!.pause();
    }
    _refreshablePlayerDialogFactory.refresh();
  }

  Future<File> getVideoFile() async {
    final String video = "video.mp4";
    Directory documentsDirectory = await VideoUtil.documentsDirectory;
    //画像から作成した動画の保存場所
    return new File("${documentsDirectory.path}/$video");
    // return File(
    //     '/Users/hasegawaitsuki/ghq/github.com/maropook/ffmpeg_flutter_test/assets/video.mp4');
  }

  Future<File> getVideoWithSubtitlesFile() async {
    final String video = "video-with-subtitles.mp4";
    Directory documentsDirectory = await VideoUtil.documentsDirectory;
    // 動画に字幕をつけた動画の保存場所
    return new File("${documentsDirectory.path}/$video");
    // return File(
    //     '/Users/hasegawaitsuki/ghq/github.com/maropook/ffmpeg_flutter_test/assets/subtitlevideo.mp4');
  }

  void showCreateProgressDialog() {
    // CLEAN STATISTICS
    _statistics = null;
    resetStatistics();
    _refreshablePlayerDialogFactory.dialogShowCancellable(
        "Creating video", () => cancelExecution(_executionId));
  }

  void showBurnProgressDialog() {
    // CLEAN STATISTICS
    _statistics = null;
    resetStatistics();
    _refreshablePlayerDialogFactory.dialogShowCancellable(
        "Burning subtitles", () => cancelExecution(_executionId));
  }

  void updateProgressDialog() {
    if (_statistics == null) {
      return;
    }

    int timeInMilliseconds = this._statistics!.time;
    if (timeInMilliseconds > 0) {
      int totalVideoDuration = 9000;

      int completePercentage = (timeInMilliseconds * 100) ~/ totalVideoDuration;

      if (_state == _State.CREATING) {
        _refreshablePlayerDialogFactory
            .dialogUpdate("Creating video % $completePercentage");
      } else if (_state == _State.BURNING) {
        _refreshablePlayerDialogFactory
            .dialogUpdate("Burning subtitles % $completePercentage");
      }
      _refreshablePlayerDialogFactory.refresh();
    }
  }

  void hideProgressDialog() {
    _refreshablePlayerDialogFactory.dialogHide();
  }

  @override
  void setController(VideoPlayerController controller) {
    _videoPlayerController = controller;
  }
}



  void burnSubtitles() {
    VideoUtilkun.assetPath(VideoUtilkun.SUBTITLE_ASSET).then((subtitlePath) {
      VideoUtilkun.assetPath(VideoUtilkun.ASSET_1).then((img1Path) {
        VideoUtilkun.assetToFile(VideoUtilkun.Movie_1).then((videoFile) {
          getVideoWithSubtitlesFile().then((videoWithSubtitlesFile) {
            // IF VIDEO IS PLAYING STOP PLAYBACK
            pause();

            try {
              videoWithSubtitlesFile.delete().catchError((_) {});
            } on Exception catch (_) {}

            ffprint("Testing SUBTITLE burning");

            _state = _State.CREATING;

            ffprint("Create completed successfully; burning subtitles.");
//subtitle
            String burnSubtitlesCommand =
                //  "-y -i ${"/Users/hasegawaitsuki/ghq/github.com/maropook/ffmpeg_flutter_test/assets/a.mp4"} -vf subtitles=$subtitlePath:force_style='Fontname=Trueno' -c:v mpeg4 ${videoWithSubtitlesFile.path}";
                // どのvideoと合成するか．
                //"-y -i ${videoPath} -vf movie=${img1Path} [watermark];[in][watermark] overlay=main_w-overlay_w-40:main_h-overlay_h-40 [out] ${videoWithSubtitlesFile.path}";
                //main//    "-y -i ${videoPath} -vf subtitles=$strPath:force_style='Fontname=Trueno' -c:v mpeg4 ${videoWithSubtitlesFile.path}";

                "-y -i ${videoPath} -i ${img1Path} -filter_complex [1:v]lut=a='val*0.4',[0:v]overlay=W-w:H-h -c:v mpeg4 ${videoWithSubtitlesFile.path}";
// ffmpeg -i inputvideo.mp4 -vf "movie=watermarklogo.png [watermark];[in][watermark] overlay=main_w-overlay_w-40:main_h-overlay_h-40 [out]" outputvideo.mp4
            showBurnProgressDialog();

            ffprint(
                "FFmpeg process started with arguments\n\'$burnSubtitlesCommand\'.");

            _state = _State.BURNING;

            executeAsyncFFmpeg(burnSubtitlesCommand,
                (CompletedFFmpegExecution secondExecution) {
              ffprint(
                  "FFmpeg process exited with rc ${secondExecution.returnCode}.");
              hideProgressDialog();

              if (secondExecution.returnCode == 0) {
                ffprint(
                    "Burn subtitles completed successfully; playing video.");
                playVideo();
              } else if (secondExecution.returnCode == 255) {
                showPopup("Burn subtitles operation cancelled.");
                ffprint("Burn subtitles operation cancelled");
              } else {
                showPopup(
                    "Burn subtitles failed. Please check log for the details.");
                ffprint(
                    "Burn subtitles failed with rc=${secondExecution.returnCode}.");
              }
            }).then((executionId) {
              _executionId = executionId;
              ffprint(
                  "Async FFmpeg process started with arguments '$burnSubtitlesCommand' and executionId $executionId.");
            });
          });
        });
      });
    });
  }
